// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: movie.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovieService_CreateFilm_FullMethodName = "/movie.MovieService/CreateFilm"
	MovieService_GetFilm_FullMethodName    = "/movie.MovieService/GetFilm"
	MovieService_UpdateFilm_FullMethodName = "/movie.MovieService/UpdateFilm"
	MovieService_DeleteFilm_FullMethodName = "/movie.MovieService/DeleteFilm"
)

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	CreateFilm(ctx context.Context, in *Film, opts ...grpc.CallOption) (*FilmResponse, error)
	GetFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*Film, error)
	UpdateFilm(ctx context.Context, in *Film, opts ...grpc.CallOption) (*FilmResponse, error)
	DeleteFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*FilmResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) CreateFilm(ctx context.Context, in *Film, opts ...grpc.CallOption) (*FilmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilmResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*Film, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Film)
	err := c.cc.Invoke(ctx, MovieService_GetFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateFilm(ctx context.Context, in *Film, opts ...grpc.CallOption) (*FilmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilmResponse)
	err := c.cc.Invoke(ctx, MovieService_UpdateFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*FilmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilmResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility.
type MovieServiceServer interface {
	CreateFilm(context.Context, *Film) (*FilmResponse, error)
	GetFilm(context.Context, *FilmRequest) (*Film, error)
	UpdateFilm(context.Context, *Film) (*FilmResponse, error)
	DeleteFilm(context.Context, *FilmRequest) (*FilmResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieServiceServer struct{}

func (UnimplementedMovieServiceServer) CreateFilm(context.Context, *Film) (*FilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilm not implemented")
}
func (UnimplementedMovieServiceServer) GetFilm(context.Context, *FilmRequest) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilm not implemented")
}
func (UnimplementedMovieServiceServer) UpdateFilm(context.Context, *Film) (*FilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilm not implemented")
}
func (UnimplementedMovieServiceServer) DeleteFilm(context.Context, *FilmRequest) (*FilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilm not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}
func (UnimplementedMovieServiceServer) testEmbeddedByValue()                      {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_CreateFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Film)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateFilm(ctx, req.(*Film))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetFilm(ctx, req.(*FilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Film)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_UpdateFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateFilm(ctx, req.(*Film))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteFilm(ctx, req.(*FilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFilm",
			Handler:    _MovieService_CreateFilm_Handler,
		},
		{
			MethodName: "GetFilm",
			Handler:    _MovieService_GetFilm_Handler,
		},
		{
			MethodName: "UpdateFilm",
			Handler:    _MovieService_UpdateFilm_Handler,
		},
		{
			MethodName: "DeleteFilm",
			Handler:    _MovieService_DeleteFilm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
